;; Analyzed by ClojureScript 1.7.170
{:use-macros {defui om.next}, :excludes #{}, :name slektsdatabase.core, :imports nil, :requires {gdom goog.dom, goog.dom goog.dom, om om.next, om.next om.next, dom om.dom, om.dom om.dom}, :uses nil, :defs {state {:name slektsdatabase.core/state, :file "src\\slekt\\core.cljs", :line 8, :column 1, :end-line 8, :end-column 11, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\core.cljs", :line 8, :column 6, :end-line 8, :end-column 11}}, read {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\core.cljs", :line 13, :column 7, :end-line 13, :end-column 11, :arglists (quote ([{:keys [state], :as env} key params]))}, :name slektsdatabase.core/read, :variadic false, :file "src\\slekt\\core.cljs", :end-column 11, :method-params ([p__21853 key params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [state], :as env} key params]))}, NameDisplay {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name slektsdatabase.core/NameDisplay, :variadic false, :file "src\\slekt\\core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, reconciler {:name slektsdatabase.core/reconciler, :file "src\\slekt\\core.cljs", :line 27, :column 1, :end-line 27, :end-column 16, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\core.cljs", :line 27, :column 6, :end-line 27, :end-column 16}}}, :require-macros {om om.next, om.next om.next, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:read :om.next/queries :config :lastname :name :value :template :state :ref->components :firstname :parser :nodes :not-found :id :indexer :born :indexes :nametemplate :templates}, :order [:nodes :templates :id :template :firstname :lastname :born :nametemplate :name :state :value :not-found :config :indexer :indexes :ref->components :om.next/queries :parser :read]}, :doc nil}