;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name slekt.relations, :imports nil, :requires {d slekt.database, slekt.database slekt.database, f slekt.db-functions, slekt.db-functions slekt.db-functions}, :uses nil, :defs {findhusband {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 97, :column 7, :end-line 97, :end-column 18, :arglists (quote ([facts pid]))}, :name slekt.relations/findhusband, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 18, :method-params ([facts pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([facts pid]))}, findparent {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 80, :column 7, :end-line 80, :end-column 17, :arglists (quote ([role pid]))}, :name slekt.relations/findparent, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 17, :method-params ([role pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([role pid]))}, findrelation {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 5, :column 7, :end-line 5, :end-column 19, :arglists (quote ([factid relation]))}, :name slekt.relations/findrelation, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 19, :method-params ([factid relation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([factid relation]))}, role-index-finder {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 21, :column 7, :end-line 21, :end-column 24, :arglists (quote ([role template]))}, :name slekt.relations/role-index-finder, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 24, :method-params ([role template]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([role template]))}, filter-by-index {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 27, :column 7, :end-line 27, :end-column 22, :arglists (quote ([event pid indexlist]))}, :name slekt.relations/filter-by-index, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 22, :method-params ([event pid indexlist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([event pid indexlist]))}, pids-of-role {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 66, :column 7, :end-line 66, :end-column 19, :arglists (quote ([events role] [events role result])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([events role] [events role result]), :arglists ([events role] [events role result]), :arglists-meta (nil nil)}}, :name slekt.relations/pids-of-role, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([events role] [events role result]), :arglists ([events role] [events role result]), :arglists-meta (nil nil)}, :method-params ([events role] [events role result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 3, :fn-var true, :arglists ([events role] [events role result])}, findspouse {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 74, :column 7, :end-line 74, :end-column 17, :arglists (quote ([eventids yourrole otherrole pid]))}, :name slekt.relations/findspouse, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 17, :method-params ([eventids yourrole otherrole pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 4, :fn-var true, :arglists (quote ([eventids yourrole otherrole pid]))}, findwife {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 98, :column 7, :end-line 98, :end-column 15, :arglists (quote ([facts pid]))}, :name slekt.relations/findwife, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 15, :method-params ([facts pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([facts pid]))}, pid-by-index {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 44, :column 7, :end-line 44, :end-column 19, :arglists (quote ([event index] [event index result])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([event index] [event index result]), :arglists ([event index] [event index result]), :arglists-meta (nil nil)}}, :name slekt.relations/pid-by-index, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([event index] [event index result]), :arglists ([event index] [event index result]), :arglists-meta (nil nil)}, :method-params ([event index] [event index result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 3, :fn-var true, :arglists ([event index] [event index result])}, findmother {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 96, :column 7, :end-line 96, :end-column 17, :arglists (quote ([pid]))}, :name slekt.relations/findmother, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 17, :method-params ([pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pid]))}, get-events {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 13, :column 7, :end-line 13, :end-column 17, :arglists (quote ([eventids] [eventids result])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([eventids] [eventids result]), :arglists ([eventids] [eventids result]), :arglists-meta (nil nil)}}, :name slekt.relations/get-events, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([eventids] [eventids result]), :arglists ([eventids] [eventids result]), :arglists-meta (nil nil)}, :method-params ([eventids] [eventids result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists ([eventids] [eventids result])}, findfather {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 95, :column 7, :end-line 95, :end-column 17, :arglists (quote ([pid]))}, :name slekt.relations/findfather, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 17, :method-params ([pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pid]))}, arrange-children {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 100, :column 7, :end-line 100, :end-column 23, :arglists (quote ([eventids pid])), :doc "Arranges children by their other parent"}, :name slekt.relations/arrange-children, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 23, :method-params ([eventids pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([eventids pid])), :doc "Arranges children by their other parent"}, event-by-role {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 36, :column 7, :end-line 36, :end-column 20, :arglists (quote ([event role pid]))}, :name slekt.relations/event-by-role, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 20, :method-params ([event role pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists (quote ([event role pid]))}, pid-of-role {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 56, :column 7, :end-line 56, :end-column 18, :arglists (quote ([event role]))}, :name slekt.relations/pid-of-role, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 18, :method-params ([event role]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event role]))}, findchildren {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 87, :column 7, :end-line 87, :end-column 19, :arglists (quote ([eventids pid]))}, :name slekt.relations/findchildren, :variadic false, :file "src\\slekt\\relations.cljs", :end-column 19, :method-params ([eventids pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([eventids pid]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:role :facttemplates :value :event/by-id :fields :mother :wife :template :husband :father :id :persona/by-id :child :links}, :order [:event/by-id :persona/by-id :value :facttemplates :fields :role :id :template :links :child :father :mother :wife :husband]}, :doc nil}