;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name slekt.relations, :imports nil, :requires {d slekt.database, slekt.database slekt.database}, :uses nil, :defs {findhusband {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 100, :column 7, :end-line 100, :end-column 18, :arglists (quote ([facts pid]))}, :name slekt.relations/findhusband, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 18, :method-params ([facts pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([facts pid]))}, findparent {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 83, :column 7, :end-line 83, :end-column 17, :arglists (quote ([role pid]))}, :name slekt.relations/findparent, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 17, :method-params ([role pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([role pid]))}, findrelation {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 8, :column 7, :end-line 8, :end-column 19, :arglists (quote ([factid relation]))}, :name slekt.relations/findrelation, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 19, :method-params ([factid relation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([factid relation]))}, role-index-finder {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 24, :column 7, :end-line 24, :end-column 24, :arglists (quote ([role template]))}, :name slekt.relations/role-index-finder, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 24, :method-params ([role template]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([role template]))}, filter-by-index {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 30, :column 7, :end-line 30, :end-column 22, :arglists (quote ([event pid indexlist]))}, :name slekt.relations/filter-by-index, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 22, :method-params ([event pid indexlist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 3, :fn-var true, :arglists (quote ([event pid indexlist]))}, pids-of-role {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 69, :column 7, :end-line 69, :end-column 19, :arglists (quote ([events role] [events role result])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([events role] [events role result]), :arglists ([events role] [events role result]), :arglists-meta (nil nil)}}, :name slekt.relations/pids-of-role, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([events role] [events role result]), :arglists ([events role] [events role result]), :arglists-meta (nil nil)}, :method-params ([events role] [events role result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 3, :fn-var true, :arglists ([events role] [events role result])}, findspouse {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 77, :column 7, :end-line 77, :end-column 17, :arglists (quote ([eventids yourrole otherrole pid]))}, :name slekt.relations/findspouse, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 17, :method-params ([eventids yourrole otherrole pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 4, :fn-var true, :arglists (quote ([eventids yourrole otherrole pid]))}, findwife {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 101, :column 7, :end-line 101, :end-column 15, :arglists (quote ([facts pid]))}, :name slekt.relations/findwife, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 15, :method-params ([facts pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([facts pid]))}, pid-by-index {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 47, :column 7, :end-line 47, :end-column 19, :arglists (quote ([event index] [event index result])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([event index] [event index result]), :arglists ([event index] [event index result]), :arglists-meta (nil nil)}}, :name slekt.relations/pid-by-index, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([event index] [event index result]), :arglists ([event index] [event index result]), :arglists-meta (nil nil)}, :method-params ([event index] [event index result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 3, :fn-var true, :arglists ([event index] [event index result])}, findmother {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 99, :column 7, :end-line 99, :end-column 17, :arglists (quote ([pid]))}, :name slekt.relations/findmother, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 17, :method-params ([pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pid]))}, get-events {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 16, :column 7, :end-line 16, :end-column 17, :arglists (quote ([eventids] [eventids result])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([eventids] [eventids result]), :arglists ([eventids] [eventids result]), :arglists-meta (nil nil)}}, :name slekt.relations/get-events, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([eventids] [eventids result]), :arglists ([eventids] [eventids result]), :arglists-meta (nil nil)}, :method-params ([eventids] [eventids result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists ([eventids] [eventids result])}, findfather {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 98, :column 7, :end-line 98, :end-column 17, :arglists (quote ([pid]))}, :name slekt.relations/findfather, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 17, :method-params ([pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pid]))}, arrange-children {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 103, :column 7, :end-line 103, :end-column 23, :arglists (quote ([eventids pid])), :doc "Arranges children by their other parent"}, :name slekt.relations/arrange-children, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 23, :method-params ([eventids pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 2, :fn-var true, :arglists (quote ([eventids pid])), :doc "Arranges children by their other parent"}, event-by-role {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 39, :column 7, :end-line 39, :end-column 20, :arglists (quote ([event role pid]))}, :name slekt.relations/event-by-role, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 20, :method-params ([event role pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 3, :fn-var true, :arglists (quote ([event role pid]))}, getPersona {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 4, :column 7, :end-line 4, :end-column 17, :arglists (quote ([id]))}, :name slekt.relations/getPersona, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 17, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, pid-of-role {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 59, :column 7, :end-line 59, :end-column 18, :arglists (quote ([event role]))}, :name slekt.relations/pid-of-role, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 18, :method-params ([event role]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event role]))}, findchildren {:protocol-inline nil, :meta {:file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :line 90, :column 7, :end-line 90, :end-column 19, :arglists (quote ([eventids pid]))}, :name slekt.relations/findchildren, :variadic false, :file "E:\\kode\\slektsdatabase\\src\\slekt\\relations.cljs", :end-column 19, :method-params ([eventids pid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([eventids pid]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:role :facttemplates :value :event/by-id :fields :mother :wife :template :husband :father :id :persona/by-id :child :links}, :order [:persona/by-id :event/by-id :value :facttemplates :fields :role :id :template :links :child :father :mother :wife :husband]}, :doc nil}